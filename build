#!/bin/bash
cd /tmp/rom || exit                               # Depends on where source got synced
#--------------------------EDIT FROM HERE-------------------------------
#  EDIT IMP VARIABLES AND COLLECT CCACHE BEFORE BUILD ELSE CI TIMEOUT

export botapi="$mybot"  # add your own bot api                      
export id="$myid"                                 # Your telegram id check in sangmatabot@tg
export build_type="final"                         # for {final} build use final or use {ccache} to collect ccache
export ccache_size="12G"                          # dont use above 10-15 gb dont abuse system
export ccachedir="/tmp/ccache"                    # ccache dir dont edit if u dunno what ur doing
export lunchcommand="lunch aosp_mido-userdebug"   # edit as per stated on manifest
export buildcommand="make -j10 bacon"             # make command as per manifest

#--------------------------EDIT UPTO HERE-------------------------------

#env variables & functions
up(){
	curl --upload-file "$1" https://transfer.sh/"$(basename "$1")"; echo
}                                                 # 14 days, 10 GB limit

tg(){
	bot_api="$botapi"                              # Your tg bot api, dont use my one haha
	your_telegram_id=$1                           # No need to edit
	msg=$2                                        # No need to edit
	curl -s "https://api.telegram.org/bot${bot_api}/sendmessage" --data "text=$msg&chat_id=${your_telegram_id}"
}
send_shell=$(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}') && export send_shell && export SELINUX_IGNORE_NEVERALLOWS=true
export CCACHE_DIR="$ccachedir" && temp69="CCACHE_EXEC=$(which ccache)" && export temp69 && export USE_CCACHE=1
ccache -M "$ccache_size" && ccache -o compression=true && ccache -z                                         

# Normal build steps
source ./build/envsetup.sh                        #env setup command
eval "$lunchcommand"                              #lunch command

# Next 8 lines should be run first to collect ccache and then upload, collect 6.5 gb in 2-3 time
if [[ "$build_type" = "ccache" ]]; then
    make api-stubs-docs || echo no problem
    make hiddenapi-lists-docs || echo no problem
    make system-api-stubs-docs || echo no problem
    make test-api-stubs-docs || echo no problem
    eval "$buildcommand"                          #use build command as on manifest
    sleep 85m                                     #Lets give some space for uploading ccache
    kill %1                                       #better way to kill it!
    ccache -s
fi

# Let's compile by parts! Coz of ram issue j10 for 10 cpu, j8 for 8 cpu, otherwise memeroy will end up even its 24G
if [[ "$build_type" = "final" ]]; then
    make api-stubs-docs || echo no problem
    make hiddenapi-lists-docs || echo no problem
    make system-api-stubs-docs || echo no problem
    make test-api-stubs-docs || echo no problem
    eval "$buildcommand"                          #use build command as on manifest
fi

# Upload rom zip file if succeed to build! Send notification to tg! And send shell to tg if build fails!
send_zip=$(up out/target/product/mido/*zip) \
&& time rclone copy out/target/product/mido/*zip main:VAULT -P \
&& tg "$id" "Build Succeed! $send_zip" \
	|| tmate -S /tmp/tmate.sock new-session -d \
	&& tmate -S /tmp/tmate.sock wait tmate-ready \
	&& tg "$id" "Build Failed!" && tg "$id" "$send_shell" \
	&& ccache -s && sleep 2h
